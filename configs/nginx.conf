events {
  worker_connections  4096;  ## Default: 1024
}

http {

    proxy_cache_path /tmp levels=1:2 keys_zone=tiler_cache:10m max_size=1g inactive=10080m use_temp_path=off;

    # this is for load-balancing, set up the upstream servers to match your docker-compose configuration
    upstream aiovt_app {
        server aiovt_app_1:80;
        server aiovt_app_2:80;
    }

    server {
        listen 8080;
        proxy_cache tiler_cache;
        proxy_cache_revalidate on; # If a client requests an item that is cached but expired as defined by the cache control headers, NGINX includes the If‑Modified‑Since field in the header of the GET request it sends to the origin server.
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504; # instructs NGINX to deliver stale content when clients request an item while an update to it is being downloaded from the origin server, instead of forwarding repeated requests to the server.
        proxy_cache_lock on; # if multiple clients request a file that is not current in the cache (a MISS), only the first of those requests is allowed through to the origin server
        location / {
            proxy_pass http://aiovt_app;
            expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public, no-transform";
            add_header X-Cache-Status $upstream_cache_status; # adds an X‑Cache‑Status HTTP header in responses to clients
            proxy_cache_bypass $cookie_nocache $arg_nocache; # for punching a hole through cache, e.g. http://www.example.com/?nocache=true
        }
    }
}